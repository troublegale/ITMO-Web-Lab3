plugins {
    id 'java'
    id 'war'
}

group 'web.itmo'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('jakarta.validation:jakarta.validation-api:3.0.0')
    compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:3.0.0')
    compileOnly('jakarta.json.bind:jakarta.json.bind-api:2.0.0')
    compileOnly('jakarta.json:jakarta.json-api:2.0.1')
    compileOnly('jakarta.mvc:jakarta.mvc-api:2.0.0')
    compileOnly('jakarta.faces:jakarta.faces-api:3.0.0')
    compileOnly('jakarta.servlet:jakarta.servlet-api:5.0.0')
    compileOnly('jakarta.transaction:jakarta.transaction-api:2.0.0')
    implementation('org.glassfish.jersey.containers:jersey-container-servlet:3.0.4')
    implementation('org.glassfish.jersey.media:jersey-media-json-jackson:3.0.4')
    implementation('org.glassfish.jersey.inject:jersey-cdi2-se:3.0.4')
    implementation('org.glassfish.jersey.core:jersey-client:3.0.4')
    implementation('org.eclipse.persistence:org.eclipse.persistence.jpa:3.0.2')
    implementation('org.postgresql:postgresql:42.2.27')
    implementation('org.primefaces:primefaces:13.0.0:jakarta')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

tasks.register('scp', Exec) {
    dependsOn 'war'
    group = 'opi'
    description = 'Builds the war archive and sends it to Helios via SCP.'
    doFirst { println 'Sending war to Helios...' }
    doLast { println 'Done!' }
    commandLine 'scp', '-P', '2222', warPath, heliosAddress
}

tasks.register('report') {
    dependsOn 'test'
    group = 'opi'
    description = 'Runs tests and if they have succeeded adds the report xml file to git and commits.'
    doLast {
        def reportFile = file(testReportPath)
        if (reportFile.exists()) {
            println 'Committing test report...'
            exec { commandLine 'git', 'add', '-f', testReportPath }
            exec { commandLine 'git', 'commit', '-m', 'added test report' }
            println 'Done!'
        } else {
            println 'Tests didn\'t succeed or test report wasn\'t found.'
        }
    }
}
