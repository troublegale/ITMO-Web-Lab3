plugins {
    id 'java'
    id 'war'
}

group 'web.itmo'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('jakarta.validation:jakarta.validation-api:3.0.0')
    compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:3.0.0')
    compileOnly('jakarta.json.bind:jakarta.json.bind-api:2.0.0')
    compileOnly('jakarta.json:jakarta.json-api:2.0.1')
    compileOnly('jakarta.mvc:jakarta.mvc-api:2.0.0')
    compileOnly('jakarta.faces:jakarta.faces-api:3.0.0')
    compileOnly('jakarta.servlet:jakarta.servlet-api:5.0.0')
    compileOnly('jakarta.transaction:jakarta.transaction-api:2.0.0')
    implementation('org.glassfish.jersey.containers:jersey-container-servlet:3.0.4')
    implementation('org.glassfish.jersey.media:jersey-media-json-jackson:3.0.4')
    implementation('org.glassfish.jersey.inject:jersey-cdi2-se:3.0.4')
    implementation('org.glassfish.jersey.core:jersey-client:3.0.4')
    implementation('org.eclipse.persistence:org.eclipse.persistence.jpa:3.0.2')
    implementation('org.postgresql:postgresql:42.2.27')
    implementation('org.primefaces:primefaces:13.0.0:jakarta')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

tasks.register('scp', Exec) {
    dependsOn 'war'
    group = 'opi'
    description = 'Builds the war archive and sends it to Helios via SCP.'
    doFirst { println 'Sending war to Helios.' }
    commandLine 'scp', '-P', '2222', warPath, heliosAddress
}

tasks.register('report') {
    dependsOn 'test'
    group = 'opi'
    description = 'Runs tests and if they have succeeded adds the report xml file to git and commits.'
    doLast {
        def reportFile = file(testReportPath)
        if (reportFile.exists()) {
            println 'Adding test report to commit.'
            def stdout = new ByteArrayOutputStream()
            def gitStatus = exec {
                commandLine 'git', 'status', '--porcelain', testReportPath
                standardOutput = stdout
            }
            if (gitStatus.getExitValue() == 0 && stdout.toString().trim() != '') {
                println 'Committing test report.'
                exec { commandLine 'git', 'add', '-f', testReportPath }
                exec { commandLine 'git', 'commit', '-m', 'added test report' }
            } else {
                println 'No changes in test report. Skipping commit.'
            }
        } else {
            println 'Tests failed or test report wasn\'t found.'
        }
    }
}

tasks.register('diff') {
    group = 'opi'
    description = 'Commits changes to git if specified classes were not changed.'
    doLast {
        def stdout = new ByteArrayOutputStream()
        def diff = exec {
            commandLine 'git', 'diff', '--name-only'
            standardOutput = stdout
        }
        def changedFiles = stdout.toString()
        if (diff.getExitValue() != 0 || stdout.toString().trim() == '') {
            println 'No changes. Skipping commit'
        } else {
            def excluded = excludedClasses.split()
            def isExcluded = false
            excluded.each { excludedClass ->
                if (changedFiles.contains("${excludedClass}.java")) {
                    isExcluded = true
                    println "Changes affect ${excludedClass}. Skipping commit."
                    return
                }
            }
            if (!isExcluded) {
                println 'Committing to git...'
                exec { commandLine 'git', 'add', '.' }
                exec { commandLine 'git', 'commit', '-m', 'executed diff task' }
            }
        }
    }
}

tasks.register('xml', Exec) {
    group = 'opi'
    description = 'Validates xml files.'
    commandLine 'python', 'validate_xml.py', '.'
}

tasks.register('native2ascii') {
    group = 'opi'
    description = 'Converts localization.properties ' +
            'from native encoding to ASCII.'

    def srcFile = file(localizationPath)
    def destFile = file(asciiLocalizationPath)
    inputs.file(srcFile)
    outputs.file(destFile)
    doLast {
        destFile.parentFile.mkdirs()
        def properties = new Properties()
        srcFile.withReader('UTF-8') { reader ->
            properties.load(reader)
        }
        destFile.withWriter('ASCII') { writer ->
            properties.store(writer, null)
        }
    }
}

tasks.register('alt', Jar) {
    group = 'opi'
    description = 'Creates an alternative version of the program.'

    def baseDir = file('src/main/java')
    def altDir = file("$buildDir/altJava")

    copy {
        from baseDir
        into altDir
    }

    fileTree(altDir).matching {
        include '**/Messages.java'
    }.each { file ->
        def newFileName = file.path.replace(
                'Messages.java', 'ErrorMessages.java')
        file.renameTo(new File(newFileName))
    }

    def messagesFile = file(
            "$altDir/web/itmo/lab3_final/Messages.java")
    messagesFile.delete()

    fileTree(altDir).each { file ->
        file.text = file.text.replaceAll(
                ' Messages ', ' ErrorMessages ')
    }

    def errorMessagesFile = file(
            "$altDir/web/itmo/lab3_final/ErrorMessages.java")
    errorMessagesFile.text = errorMessagesFile
            .text.replaceAll('bundle', 'rb')

    archiveFileName.set("Lab3_ALT.jar")
    from altDir
}
